'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Copyright (c) 2016, Felipe Thom√©
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

var React = require('react');
var TransitionHooks = require('react-transition-hooks');
var TransitionChild = require('./TransitionChild');

var Transition = React.createClass({
  displayName: 'Transition',

  propTypes: {
    children: React.PropTypes.node,
    childrenStyles: React.PropTypes.shape({
      base: React.PropTypes.object,
      appear: React.PropTypes.object,
      enter: React.PropTypes.object,
      leave: React.PropTypes.object
    }),
    component: React.PropTypes.string,
    onPhaseEnd: React.PropTypes.func,
    onPhaseStart: React.PropTypes.func
  },

  getDefaultProps: function getDefaultProps() {
    return {
      childrenStyles: {},
      component: 'div'
    };
  },

  render: function render() {
    var _props = this.props,
        children = _props.children,
        childrenStyles = _props.childrenStyles,
        component = _props.component,
        onPhaseEnd = _props.onPhaseEnd,
        onPhaseStart = _props.onPhaseStart,
        others = _objectWithoutProperties(_props, ['children', 'childrenStyles', 'component', 'onPhaseEnd', 'onPhaseStart']);

    return React.createElement(
      TransitionHooks,
      _extends({ component: component }, others),
      React.Children.map(children, function (child) {
        return React.createElement(
          TransitionChild,
          {
            id: ((child || {}).props || {}).id,
            childrenBaseStyle: childrenStyles.base,
            childrenAppearStyle: childrenStyles.appear,
            childrenEnterStyle: childrenStyles.enter,
            childrenLeaveStyle: childrenStyles.leave,
            onChildAppeared: onPhaseEnd,
            onChildEntered: onPhaseEnd,
            onChildLeft: onPhaseEnd,
            onChildStartAppear: onPhaseStart,
            onChildStartEnter: onPhaseStart,
            onChildStartLeave: onPhaseStart,
            style: ((child || {}).props || {}).style
          },
          child
        );
      }, this)
    );
  }

});

module.exports = Transition;